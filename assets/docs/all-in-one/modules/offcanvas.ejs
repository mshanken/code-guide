<!-- Off canvas
  ================================================== -->
  <div class="bs-docs-section">
    <div class="page-header">
      <h1 id="offcanvas">Off canvas <small>offcanvas.js</small></h1>
    </div>

    <h2 id="offcanvas-examples">Example</h2>
    <p>The offcanvas plugin allows you to hide an element from sight and than show it by moving either that or any other element. It's intended to be used for off canvas navigation, like push menus.</p>
    <div class="bs-example bs-navmenu-offcanvas-example">
      <div id="myNavmenuCanvas">
        <nav id="myNavmenu" class="navmenu navmenu-default navmenu-fixed-left offcanvas" role="navigation">
          <a class="navmenu-brand" href="#">Brand</a>
          <ul class="nav navmenu-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#">Link</a></li>
            <li><a href="#">Link</a></li>
          </ul>
        </nav>
        <div class="navbar navbar-default navbar-fixed-top">
          <button type="button" class="navbar-toggle" data-toggle="offcanvas" data-target="#myNavmenu" data-canvas="#myNavmenuCanvas" data-placement="left">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
        </div>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in aliquet nisl. Praesent sed leo congue, fringilla eros eu, tempus metus. Nam mollis odio ipsum, non vehicula ipsum accumsan sodales. Morbi varius vitae elit euismod cursus. Donec a dapibus justo, in facilisis nisi. Suspendisse ut turpis dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque dui risus, tincidunt at odio ut, ultrices dignissim ipsum. Cras ultrices erat nec leo luctus varius. Nulla sollicitudin tincidunt nulla, ut porta mauris volutpat vitae. Suspendisse ornare dolor sit amet massa venenatis pulvinar.</p>
      </div>
    </div><!-- /example -->
{% highlight html %}
<nav id="myNavmenu" class="navmenu navmenu-default navmenu-fixed-left offcanvas" role="navigation">
  <a class="navmenu-brand" href="#">Brand</a>
  <ul class="nav navmenu-nav">
    <li class="active"><a href="#">Home</a></li>
    <li><a href="#">Link</a></li>
    <li><a href="#">Link</a></li>
  </ul>
</nav>
<div class="navbar navbar-default navbar-fixed-top">
  <button type="button" class="navbar-toggle" data-toggle="offcanvas" data-target="#myNavmenu" data-canvas="body">
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
  </button>
</div>
{% endhighlight %}

    <div class="bs-callout bs-callout-info">
      <h4>Examples</h4>
      <p>For better understanding, have a look at the <a href="../examples/navmenu/">off canvas slide in menu</a>, <a href="../examples/navmenu-push/">off canvas push menu</a> and <a href="../examples/navmenu-reveal/">off canvas reveal menu</a> exapmles.</p>
    </div>

    <hr class="bs-docs-separator">

    <h2 id="offcanvas-usage">Usage</h2>
    <p>Add <code>.offcanvas</code> to hide an element. Alternatively add <code>.offcanvas-*</code> to hide an element up to a specific viewport width. Adding the <code>.offcanvas</code> class is not required. You may also hide an element by any other means.</p>
    <p>The effect works best for elements positioned to the top, bottom, left or right of the window, either with absolute or fixed positioning.</p>
    <p>When shown, the plugin adds <code>.canvas-slid</code> to the element that has slid.</p>
    
    <h3>Via data attributes</h3>
    <p>Add <code>data-toggle="offcanvas"</code> and a <code>data-target</code> to control, assigning it to show and hide the target element. The <code>data-target</code> attribute accepts a CSS selector to apply the collapse to.</p>
    <p>Optionally add a <code>data-canvas</code> attribute to slide a canvas instead of only the target element. For a push menu set <code>data-canvas="body"</code>.

    <h3>Via JavaScript</h3>
    <p>Call the input mask via javascript:</p>
{% highlight js %}
$('.navmenu').offcanvas()
{% endhighlight %}

    <h3>Options</h3>
    <table class="table table-bordered table-striped">
      <thead>
        <tr>
          <th style="width: 100px;">Name</th>
          <th style="width: 50px;">type</th>
          <th style="width: 100px;">default</th>
          <th>description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>canvas</td>
          <td>string</td>
          <td>false</td>
          <td>If set, the canvas will be moved on show and hide instead of the target element. This creates alternative effects.</td>
        </tr>
        <tr>
          <td>toggle</td>
          <td>boolean</td>
          <td>true</td>
          <td>Toggles the off canvas element on invocation</td>
        </tr>
        <tr>
          <td>placement</td>
          <td>string</td>
          <td>'auto'</td>
          <td>Where to position the element at the start of the animation. For example, if placement is "left", the element will slide from left to right. The default option "auto" guesses the placement based on position and dimension.</td>
        </tr>
        <tr>
          <td>autohide</td>
          <td>boolean</td>
          <td>true</td>
          <td>Hide the off canvas element if clicked anywhere other that the element.</td>
        </tr>
        <tr>
          <td>recalc</td>
          <td>boolean</td>
          <td>true</td>
          <td>Calculate if off canvas should be disabled for this viewport width on window resize. If your elements always gets hidden on window resize, try setting this to false.</td>
        </tr>
        <tr>
          <td>disableScrolling</td>
          <td>boolean</td>
          <td>true</td>
          <td>Disable scrolling when the off canvas element is shown, by setting overflow to hidden for the body.</td>
        </tr>
      </tbody>
    </table>
    
    <div class="bs-callout bs-callout-danger">
      <h4>Graceful degradation</h4>
      <p>For browsers that don't support transform (mainly IE8), the <code>target</code> option is ignored. In that case, the plugin will always slide the target element. In that case <code>.canvas-slid</code> will be added to the target element instead.</p>
    </div>
    

    <h3>Methods</h3>
    <h4>.offcanvas(options)</h4>
    <p>Initializes the off canvas element with an optional options.</p>
    <h4>.offcanvas('toggle')</h4>
    <p>Toggles an off canvas element to shown or hidden.</p>
    <h4>.offcanvas('show')</h4>
    <p>Shows an off canvas element.</p>
    <h4>.offcanvas('hide')</h4>
    <p>Hides an off canvas element.</p>
    
    <h3>Events</h3>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
          <tr>
            <th style="width: 150px;">Event Type</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>show.bs.offcanvas</td>
            <td>This event fires immediately when the show instance method is called.</td>
          </tr>
          <tr>
            <td>shown.bs.offcanvas</td>
            <td>This event is fired when the target has been made visible to the user (will wait for CSS transitions to complete).</td>
          </tr>
          <tr>
            <td>hide.bs.offcanvas</td>
            <td>This event is fired immediately when the hide instance method has been called.</td>
          </tr>
          <tr>
            <td>hidden.bs.offcanvas</td>
            <td>This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).</td>
          </tr>
        </tbody>
      </table>
    </div><!-- ./bs-table-responsive -->
  </div>